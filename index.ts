import { Plugin } from "rollup";
import { writeFileSync, mkdirSync } from 'node:fs'
import * as nodePath from 'node:path'
import { config } from 'dotenv'

interface Options {
    mode?: string; // development | production | test | etc.
    dto?: string; // env.d.ts file path, 生成的dts文件路径
    env?: Record<string, string | number | boolean>; // env variables, 附属环境变量
    path?: string; // path to the env file, 环境变量文件路径
    [key: string]: string | number | boolean | Record<string, string | number | boolean>; 
}

const transformEnv = (env) => {
    const transformed = {};
    Object.keys(env).forEach(key => {
        const value = env[key];
        if (/^\d+(\.\d+)?$/.test(value)) {
            // 可以转成数字类型
            transformed[key] = Number(value);
        } else if (value === 'true' || value === 'false') {
            // 可以转成布尔类型
            transformed[key] = Boolean(value);
        } else {
            // 其他类型都转成字符串类型
            transformed[key] = String(value);
        }
    });
    return transformed;
}


const createEnvTypes = (values, dto) => {
    let envTypes = `/* eslint-disable */
/**
* ${dto}
*  This file is automatically generated by 'rollup-plugin-inject-dotenv' plugin. 
*  Use 'dotenv' npm package to load your environment variables from .env file.
*  You can also manually edit this file to add or remove environment variables.
*  Global environment variables.
*/

/**
* Global environment variables.
*/
export interface GlobalEnv {
`;
    Object.keys(values).forEach(key => {
        const value = values[key];

        if (typeof value === 'number') {
            // 可以转成数字类型
            envTypes += `   ${key}: number;\n`;
        } else if (typeof value === 'boolean') {
            // 可以转成布尔类型
            envTypes += `   ${key}: boolean;\n`;
        } else {
            // 其他类型都转成字符串类型
            envTypes += `   ${key}: string;\n`;
        }
    });

    envTypes += `}\n`;

    envTypes += `declare global{\n  const ENV: GlobalEnv;\n}\nexport {};`
    const dtoPath = nodePath.dirname(dto);
    if (dtoPath && !nodePath.isAbsolute(dtoPath)) {
        mkdirSync(dtoPath, { recursive: true });
    }
    // 写入dist/env.d.ts
    writeFileSync(dto, envTypes);
    console.log('rollup-plugin-inject-dotenv global env types：', dto, ' generated successfully.');
}

const defaultOptions: Options = {
    mode: "",
    dto: "env.d.ts",
    env: {},
    path: ".env",
};

const injectEnv: Plugin<Options> = (options: Options = defaultOptions) => {
    const { mode = '', path = '.env', dto = 'env.d.ts', env = {} } = options;
    const envKeys = Object.keys(env);
    let addWatched = false; // 是否监听.env文件变化

    if (options.mode)  {
        options.path = `.env.${mode}`;
    }
    const envFile = options.path // 环境变量文件路径
    return {
        name: "rollup-plugin-inject-dotenv",
        buildStart() {
            const c = config({ path: envFile }).parsed || {}
            Object.assign(env,c)
            createEnvTypes(env, dto);

            if (!addWatched) {
                this.addWatchFile(envFile); // listen to .env file changes
                addWatched = true
            }
        },
        renderChunk(code, chunk) {
            if (chunk.isEntry) {
                // entry file needs to be modified to inject environment variables
                return `window.ENV = ${JSON.stringify(env)};${code}`;
            }
            return code
        },
        watchChange() {
            createEnvTypes(env, dto);

        },
        buildEnd() {
            if (envKeys.length > 0) {
                this.warn(`Environment variables injected: ${envKeys.join(', ')}`)
            }
        },
    };
};

export default injectEnv;
