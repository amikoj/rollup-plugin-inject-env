'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs');
var nodePath = require('path');
var dotenv = require('dotenv');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var nodePath__namespace = /*#__PURE__*/_interopNamespaceDefault(nodePath);

const transformEnv = (env) => {
    const transformed = {};
    Object.keys(env).forEach(key => {
        const value = env[key];
        if (/^\d+(\.\d+)?$/.test(value)) {
            // 可以转成数字类型
            transformed[key] = Number(value);
        }
        else if (value === 'true' || value === 'false') {
            // 可以转成布尔类型
            transformed[key] = Boolean(value);
        }
        else {
            // 其他类型都转成字符串类型
            transformed[key] = String(value);
        }
    });
    return transformed;
};
const createEnvTypes = (values, dto) => {
    let envTypes = `/* eslint-disable */
/**
* ${dto}
*  This file is automatically generated by 'rollup-plugin-inject-dotenv' plugin. 
*  Use 'dotenv' npm package to load your environment variables from .env file.
*  You can also manually edit this file to add or remove environment variables.
*  Global environment variables.
*/

/**
* Global environment variables.
*/
export interface GlobalEnv {
`;
    Object.keys(values).forEach(key => {
        const value = values[key];
        if (typeof value === 'number') {
            // 可以转成数字类型
            envTypes += `   ${key}: number;\n`;
        }
        else if (typeof value === 'boolean') {
            // 可以转成布尔类型
            envTypes += `   ${key}: boolean;\n`;
        }
        else {
            // 其他类型都转成字符串类型
            envTypes += `   ${key}: string;\n`;
        }
    });
    envTypes += `}\n`;
    envTypes += `declare global{\n  const ENV: GlobalEnv;\n}\nexport {};`;
    const dtoPath = nodePath__namespace.dirname(dto);
    if (dtoPath && !nodePath__namespace.isAbsolute(dtoPath)) {
        fs.mkdirSync(dtoPath, { recursive: true });
    }
    // 写入dist/env.d.ts
    fs.writeFileSync(dto, envTypes);
    console.log('rollup-plugin-inject-dotenv global env types：', dto, ' generated successfully.');
};
const defaultOptions = {
    mode: "",
    dto: "env.d.ts",
    env: {},
    path: ".env",
};
const injectEnv = (options = defaultOptions) => {
    const { mode = '', path = '.env', dto = 'env.d.ts', env = {} } = options;
    const envKeys = Object.keys(env);
    let addWatched = false; // 是否监听.env文件变化
    if (options.mode) {
        options.path = `.env.${mode}`;
    }
    const envFile = path; // 环境变量文件路径
    return {
        name: "rollup-plugin-inject-dotenv",
        buildStart() {
            const c = dotenv.config({ path: envFile }).parsed || {};
            Object.assign(env, transformEnv(c), { ...env });
            createEnvTypes(env, dto);
            if (!addWatched) {
                this.addWatchFile(envFile); // listen to .env file changes
                addWatched = true;
            }
        },
        renderChunk(code, chunk) {
            if (chunk.isEntry) {
                // entry file needs to be modified to inject environment variables
                return `window.ENV = ${JSON.stringify(env)};${code}`;
            }
            return code;
        },
        watchChange() {
            createEnvTypes(env, dto);
        },
        buildEnd() {
            if (envKeys.length > 0) {
                this.warn(`Environment variables injected: ${envKeys.join(', ')}`);
            }
        },
    };
};

exports.default = injectEnv;
module.exports = Object.assign(exports.default, exports);
//# sourceMappingURL=index.js.map
